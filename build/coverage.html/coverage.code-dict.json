{"/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/test.js":"/* istanbul instrument in package npmtest_ember_truth_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/lib.npmtest_ember_truth_helpers.js":"/* istanbul instrument in package npmtest_ember_truth_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_truth_helpers = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_truth_helpers = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-truth-helpers && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_truth_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_truth_helpers\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_truth_helpers.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_truth_helpers.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_truth_helpers.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_truth_helpers.__dirname + '/lib.npmtest_ember_truth_helpers.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-truth-helpers'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/and.js":"import truthConvert from '../utils/truth-convert';\n\nexport function andHelper(params) {\n  for (var i=0, len=params.length; i<len; i++) {\n    if (truthConvert(params[i]) === false) {\n      return params[i];\n    }\n  }\n  return params[params.length-1];\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/equal.js":"export function equalHelper(params) {\n  return params[0] === params[1];\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/gte.js":"\nexport function gteHelper(params, hash) {\n  let left = params[0];\n  let right = params[1];\n  if (hash.forceNumber) {\n    if (typeof left !== 'number') { left = Number(left); }\n    if (typeof right !== 'number') { right = Number(right); }\n  }\n  return left >= right;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/gt.js":"\nexport function gtHelper(params, hash) {\n  let left = params[0];\n  let right = params[1];\n  if (hash.forceNumber) {\n    if (typeof left !== 'number') { left = Number(left); }\n    if (typeof right !== 'number') { right = Number(right); }\n  }\n  return left > right;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/is-array.js":"import Ember from 'ember';\n\nexport function isArrayHelper(params) {\n  for (var i=0, len=params.length; i<len; i++) {\n    if (Ember.isArray(params[i]) === false) {\n      return false;\n    }\n  }\n  return true;\n}","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/is-equal.js":"import Ember from 'ember';\nconst { isEqual: emberIsEqual } = Ember;\n\nexport function isEqual([a, b]) {\n  return emberIsEqual(a, b);\n}\n\nexport default Ember.Helper.helper(isEqual);\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/lte.js":"\nexport function lteHelper(params, hash) {\n  let left = params[0];\n  let right = params[1];\n  if (hash.forceNumber) {\n    if (typeof left !== 'number') { left = Number(left); }\n    if (typeof right !== 'number') { right = Number(right); }\n  }\n  return left <= right;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/lt.js":"\nexport function ltHelper(params, hash) {\n  let left = params[0];\n  let right = params[1];\n  if (hash.forceNumber) {\n    if (typeof left !== 'number') { left = Number(left); }\n    if (typeof right !== 'number') { right = Number(right); }\n  }\n  return left < right;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/not-equal.js":"\nexport function notEqualHelper(params) {\n  return params[0] !== params[1];\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/not.js":"import truthConvert from '../utils/truth-convert';\n\nexport function notHelper(params) {\n  for (var i=0, len=params.length; i<len; i++) {\n    if (truthConvert(params[i]) === true) {\n      return false;\n    }\n  }\n  return true;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/or.js":"import truthConvert from '../utils/truth-convert';\n\nexport function orHelper(params) {\n  for (var i=0, len=params.length; i<len; i++) {\n    if (truthConvert(params[i]) === true) {\n      return params[i];\n    }\n  }\n  return params[params.length-1];\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/helpers/xor.js":"import truthConvert from '../utils/truth-convert';\n\nexport function xorHelper(params) {\n  return truthConvert(params[0]) !== truthConvert(params[1]);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/utils/register-helper.js":"import Ember from 'ember';\n\nfunction registerHelperIteration1(name, helperFunction) {\n\t//earlier versions of ember with htmlbars used this\n\tEmber.HTMLBars.helpers[name] = Ember.HTMLBars.makeBoundHelper(helperFunction);\n}\n\nfunction registerHelperIteration2(name, helperFunction) {\n\t//registerHelper has been made private as _registerHelper\n\t//this is kept here if anyone is using it\n\tEmber.HTMLBars.registerHelper(name, Ember.HTMLBars.makeBoundHelper(helperFunction));\n}\n\nfunction registerHelperIteration3(name, helperFunction) {\n\t//latest versin of ember uses this\n\tEmber.HTMLBars._registerHelper(name, Ember.HTMLBars.makeBoundHelper(helperFunction));\n}\n\nexport function registerHelper(name, helperFunction) {\n\t// Do not register helpers from Ember 1.13 onwards, starting from 1.13 they\n  // will be auto-discovered.\n  if (Ember.Helper) {\n    return;\n  }\n\t\n\tif (Ember.HTMLBars._registerHelper) {\n\t\tif (Ember.HTMLBars.helpers) {\n\t\t\tregisterHelperIteration1(name, helperFunction);\n\t\t} else {\n\t\t\tregisterHelperIteration3(name, helperFunction);\n\t\t}\n\t} else if (Ember.HTMLBars.registerHelper) {\n\t\tregisterHelperIteration2(name, helperFunction);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/addon/utils/truth-convert.js":"import Ember from 'ember';\n\nexport default function truthConvert(result) {\n  var truthy = result && Ember.get(result, 'isTruthy');\n  if (typeof truthy === 'boolean') { return truthy; }\n\n  if (Ember.isArray(result)) {\n    return Ember.get(result, 'length') !== 0;\n  } else {\n    return !!result;\n  }\n}","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/and.js":"import Ember from 'ember';\nimport { andHelper } from 'ember-truth-helpers/helpers/and';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(andHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(andHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/eq.js":"import Ember from 'ember';\nimport { equalHelper } from 'ember-truth-helpers/helpers/equal';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(equalHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(equalHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/gte.js":"import Ember from 'ember';\nimport { gteHelper } from 'ember-truth-helpers/helpers/gte';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(gteHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(gteHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/gt.js":"import Ember from 'ember';\nimport { gtHelper } from 'ember-truth-helpers/helpers/gt';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(gtHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(gtHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/is-array.js":"import Ember from 'ember';\nimport { isArrayHelper } from 'ember-truth-helpers/helpers/is-array';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(isArrayHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(isArrayHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/is-equal.js":"export { default, isEqual } from 'ember-truth-helpers/helpers/is-equal';\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/lte.js":"import Ember from 'ember';\nimport { lteHelper } from 'ember-truth-helpers/helpers/lte';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(lteHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(lteHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/lt.js":"import Ember from 'ember';\nimport { ltHelper } from 'ember-truth-helpers/helpers/lt';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(ltHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(ltHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/not-eq.js":"import Ember from 'ember';\nimport { notEqualHelper } from 'ember-truth-helpers/helpers/not-equal';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(notEqualHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(notEqualHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/not.js":"import Ember from 'ember';\nimport { notHelper } from 'ember-truth-helpers/helpers/not';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(notHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(notHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/or.js":"import Ember from 'ember';\nimport { orHelper } from 'ember-truth-helpers/helpers/or';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(orHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(orHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/helpers/xor.js":"import Ember from 'ember';\nimport { xorHelper } from 'ember-truth-helpers/helpers/xor';\n\nvar forExport = null;\n\nif (Ember.Helper) {\n  forExport = Ember.Helper.helper(xorHelper);\n} else if (Ember.HTMLBars.makeBoundHelper) {\n  forExport = Ember.HTMLBars.makeBoundHelper(xorHelper);\n}\n\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-truth-helpers/node_modules/ember-truth-helpers/app/initializers/truth-helpers.js":"import Ember from 'ember';\nimport { registerHelper } from 'ember-truth-helpers/utils/register-helper';\n\nimport { andHelper } from 'ember-truth-helpers/helpers/and';\nimport { orHelper } from 'ember-truth-helpers/helpers/or';\nimport { equalHelper } from 'ember-truth-helpers/helpers/equal';\nimport { notHelper } from 'ember-truth-helpers/helpers/not';\nimport { isArrayHelper } from 'ember-truth-helpers/helpers/is-array';\nimport { notEqualHelper } from 'ember-truth-helpers/helpers/not-equal';\nimport { gtHelper } from 'ember-truth-helpers/helpers/gt';\nimport { gteHelper } from 'ember-truth-helpers/helpers/gte';\nimport { ltHelper } from 'ember-truth-helpers/helpers/lt';\nimport { lteHelper } from 'ember-truth-helpers/helpers/lte';\n\nexport function initialize(/* container, application */) {\n\n  // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they\n  // will be auto-discovered.\n  if (Ember.Helper) {\n    return;\n  }\n\n  registerHelper('and', andHelper);\n  registerHelper('or', orHelper);\n  registerHelper('eq', equalHelper);\n  registerHelper('not', notHelper);\n  registerHelper('is-array', isArrayHelper);\n  registerHelper('not-eq', notEqualHelper);\n  registerHelper('gt', gtHelper);\n  registerHelper('gte', gteHelper);\n  registerHelper('lt', ltHelper);\n  registerHelper('lte', lteHelper);\n}\n\nexport default {\n  name: 'truth-helpers',\n  initialize: initialize\n};\n"}